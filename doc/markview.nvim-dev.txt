*markview.nvim-dev*                                      ðŸ’» Dev documentations

Mostly for extending plugin functionalities.

------------------------------------------------------------------------------
ðŸ“‘ State

Plugin states are stored in `require("markview").states`.

>lua
    --- Table containing various plugin states.
    ---@class mkv.state
    ---
    --- List of attached buffers.
    ---@field attached_buffers integer[]
    ---
    --- Buffer local states.
    ---@field buffer_states { [integer]: { enable: boolean, hybrid_mode: boolean? } }
    ---
    --- Source buffer for hybrid mode.
    ---@field splitview_source? integer
    --- Preview buffer for hybrid mode.
    ---@field splitview_buffer? integer
    --- Preview window for hybrid mode.
    ---@field splitview_window? integer
    markview.state = {
        attached_buffers = {},
        buffer_states = {},

        splitview_buffer = nil,
        splitview_source = nil,
        splitview_window = nil
    };
<

â–Œ ðŸš¨ Warning
â–Œ `splitview_buffer` might not be `nil` even after closing splitview as
â–Œ thereâ€™s no point in creating a new buffer every time.

------------------------------------------------------------------------------
ðŸš€ Internal functions

â–Œ ðŸ’¡ Tip
â–Œ The sub-command implementation can be found in
â–Œ `require("markview").commands`.

Commonly used functions can be found inside `require("markview").actions`.
These are,

  â€¢ `__exec_callback`,
    Safely executes a given callback.
    Usage: `markview.actions.__exec_callback(callback, ...)`

    â€¢ `callback`, callback name.
    â€¢ `...` arguments.

  â€¢ `__is_attached`,
    Checks if `markview` is attached to a buffer or not.
    Usage: `markview.actions.__is_attached(buffer)`

    â€¢ `buffer`, buffer ID(defaults to current buffer).

    Return: `boolean`

  â€¢ `__is_enabled`,
    Checks if `markview` is enabled on a buffer or not.
    Usage: `markview.actions.__is_enabled(buffer)`

    â€¢ `buffer`, buffer ID(defaults to current buffer).

    Return: `boolean`

  â€¢ `__splitview_setup`
    Sets up the buffer & window for `splitview`.
    Usage: `markview.actions.__splitview_setup()`

â–Œ ðŸš¨ Warning
â–Œ Anti-pattern: Prevents users from forcefully closing the splitview window.

------------------------------------------------------------------------------

  â€¢ `attach`
    Attaches `markview` to a buffer.
    Usage: `markview.actions.attach(buffer)`

    â€¢ `buffer`, buffer ID(defaults to current buffer).

  â€¢ `detach`
    Detaches `markview` to a buffer.
    Usage: `markview.actions.detach(buffer)`

    â€¢ `buffer`, buffer ID(defaults to current buffer).


------------------------------------------------------------------------------

  â€¢ `enable`
    Enables previews for the given buffer.
    Usage: `markview.actions.enable(buffer)`

    â€¢ `buffer`, buffer ID(defaults to current buffer).

  â€¢ `disable`
    Disables previews for the given buffer.
    Usage: `markview.actions.disable(buffer)`

    â€¢ `buffer`, buffer ID(defaults to current buffer).


------------------------------------------------------------------------------

  â€¢ `hybridEnable`
    Enables hybrid mode for the given buffer.
    Usage: `markview.actions.hybridEnable(buffer)`

    â€¢ `buffer`, buffer ID(defaults to current buffer).

  â€¢ `hybridDisable`
    Disables hybrid mode for the given buffer.
    Usage: `markview.actions.hybridDisable(buffer)`

    â€¢ `buffer`, buffer ID(defaults to current buffer).

------------------------------------------------------------------------------

  â€¢ `splitOpen`
    Opens splitview for the given buffer.
    Usage: `markview.actions.splitOpen(buffer)`

    â€¢ `buffer`, buffer ID(defaults to current buffer).

  â€¢ `splitClose`
    Closes any open splitview window.

------------------------------------------------------------------------------
âœ¨ Manual previews

You can manually show previews via these functions,

  â€¢ markview.render(buffer, state, config)
    Renders preview on `buffer`(defaults to current buffer).

    â€¢ `buffer`, buffer ID.
    â€¢ `state`, buffer state(`{ enable: boolean, hybrid_mode: boolean }).
    â€¢ `config`, custom config to use(doesnâ€™t merge with user config).

  â€¢ `markview.clear(buffer)`
    Clears previews of `buffer`(defaults to current buffer).

------------------------------------------------------------------------------

  â€¢ `markview.clean()`
    Detaches `markview` from any invalid buffer.

------------------------------------------------------------------------------


vim:ft=help:tw=78:ts=4:
